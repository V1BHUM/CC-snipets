<snippet>
	<content><![CDATA[
const ll mod = 998244353;
 
ll inv(ll i) {if (i == 1) return 1; return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;}
 
ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}
 
ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}
 
ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}
 
ll ceil_div(ll a, ll b) {return a % b == 0 ? a / b : a / b + 1;}
 
ll pwr(ll a, ll b) {a %= mod; ll res = 1; while (b > 0) {if (b & 1) res = res * a % mod; a = a * a % mod; b >>= 1;} return res;}

 bool isPrime(int num) 
 {
    if(num <= 1) return false;
    if (num <= 3)  return true; 
    int range = sqrt(num);
    if (num % 2 == 0 || num % 3 == 0) 
        return false; 
    for (int i = 5; i <= range; i += 6) 
        if (num % i == 0 || num % (i + 2) == 0) 
            return false; 
    
    return true;
}

/*rolling hash
    int p = 31, m = 999998727899999;
*/

ll N = 100005;
// change this N as required
vll fact(N + 1, 1);
vll ifact(N + 1, 1);
ll C(ll n, ll r)
{
    if (r > n)return 0;
    ll ans = fact[n];
    ans = mod_mul(ans, ifact[r]);
    ans = mod_mul(ans, ifact[n - r]);
    return ans;
 
    // cut this part from here and paste inside the main function and outside while(t--)
    for(int i = 2; i<=N;i++)
    {
        fact[i] = mod_mul(fact[i - 1], i);
    }
    ifact[N] = inv(fact[N]);
    for (int i = N - 1; i > 0; i--)
    {
        ifact[i] = mod_mul(i + 1, ifact[i + 1]);
    }
}

vi getPrimesSieve(int n)
{
    vi isPrime(n+1,1);
    for(int i = 2;i*i<=n;i++)
    {
        int p = 2;
        while(p*i<=n)
        {
            isPrime[p++*i] = 0;
        }
    }
    vi ret;
    for(int i = 2;i<=n;i++)
    {
        if(isPrime[i])
            ret.pb(i);
    }
    return ret;
}

vll spf(N + 1, 1);
void sieve()
{
    ll i, j;
    for(int i = 2;i<N;i++)
    {
        if (spf[i] == 1)
        {
            spf[i] = i;
            for (j = i * i; j <= N; j += i)
            {
                if (spf[j] == 1)spf[j] = i;
            }
        }
    }
}
vll factorize(ll n)
{
    vll ans;
    while (n > 1)
    {
        ll fact = spf[n];
        while (n % fact == 0)
        {
            n /= fact;
        }
        ans.pb(fact);
    }
    return ans;
}

multiset<int> getFactors(int n)
{
    multiset<int> ret;
    while (n % 2 == 0)
    {
        ret.insert(2);
        n = n/2;
    }
 
    for (int i = 3; i <= sqrt(n); i = i + 2)
    {
        while (n % i == 0)
        {
            ret.insert(i);
            n = n/i;
        }
    }
 
    if (n > 2)
        ret.insert(n);
        return ret;
}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>math</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> 
</snippet>
